-- transaction　の例として入出金管理がある。
-- AさんがBさんに10万円振り込むとき、簡単に言えば以下のような処理が行われる
-- 処理１．Aさんの口座から10万円マイナスする
-- 処理２．Bさんの口座に10万円プラスする
-- このとき、処理１終了時点で何らかのエラーが邪魔をし、処理が止まったとすると
-- 10万円が消滅してしまう。Aさんは10万マイナス、Bさんには10万入らないという事態
-- そこで、処理１と処理２は分割できない1つの処理として扱い、
-- もし処理１が失敗したら処理2も取り消されるようにする。
-- このように、複数の処理をまとめて扱う機能をtransactionという。
-- また、結果の反映を「commit」
-- 結果を反映しないことを「rollback」という。

-- 以下簡単な例として、トランザクション内でテーブルを削除し
-- ロールバックして結果を反映しないことをやってみる。

-- start transaction;
-- ここで「query OKとなってることを確認」

-- delete from tb;
-- select * from tb;でテーブルが消えたことを確認

-- ロールバックして消えた結果が結局反映されていないことを確認しよう
-- rollback;
-- select * from tb;
-- ロールバックせず、「commit」した場合はdelete結果が反映され、テーブルが消えます。

-- 注意　drop文とalter文は自動的にコミットされるので注意　

